import os
import requests
import xml.etree.ElementTree as ET
from dotenv import load_dotenv
from datetime import datetime
from linebot import LineBotApi
from linebot.models import TextSendMessage
from utils.users import get_registered_users

load_dotenv()

LINE_CHANNEL_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)

def format_datetime_thai(dt_str):
    try:
        dt = datetime.strptime(dt_str, "%Y-%m-%d %H:%M:%S.%f")
        thai_months = [
            "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
            "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
        ]
        month = thai_months[dt.month - 1]
        return f"{dt.day} {month} {dt.year} ‡πÄ‡∏ß‡∏•‡∏≤ {dt.strftime('%H:%M')} ‡∏ô."
    except Exception:
        return dt_str

def fetch_earthquakes():
    url = "https://data.tmd.go.th/api/DailySeismicEvent/v1/?uid=api&ukey=api12345"
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"Error fetching earthquake data: {e}")
        return []

    earthquakes = []
    root = ET.fromstring(response.text)
    for quake in root.findall(".//DailyEarthquakes"):
        try:
            magnitude = float(quake.find("Magnitude").text)
        except (TypeError, ValueError):
            continue

        if magnitude >= 5.0:
            earthquakes.append({
                "Magnitude": quake.find("Magnitude").text or "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                "OriginThai": quake.find("OriginThai").text or "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                "DateTimeThai": quake.find("DateTimeThai").text or "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                "Depth": quake.find("Depth").text or "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                "Latitude": quake.find("Latitude").text or "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                "Longitude": quake.find("Longitude").text or "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
            })

    return earthquakes

def send_alerts():
    earthquakes = fetch_earthquakes()
    if not earthquakes:
        print("No significant earthquakes.")
        return

    users = get_registered_users()
    if not users:
        print("No registered users.")
        return

    for quake in earthquakes:
        message = (
            f"üö® ‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á!\n"
            f"‡∏Ç‡∏ô‡∏≤‡∏î: {quake['Magnitude']} ‡πÅ‡∏°‡∏Å‡∏ô‡∏¥‡∏à‡∏π‡∏î\n"
            f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {quake['OriginThai']}\n"
            f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å: {quake['Depth']} ‡∏Å‡∏°.\n"
            f"‡∏û‡∏¥‡∏Å‡∏±‡∏î: {quake['Latitude']}, {quake['Longitude']}\n"
            f"‡πÄ‡∏ß‡∏•‡∏≤: {format_datetime_thai(quake['DateTimeThai'])}"
        )
        for user_id in users:
            try:
                line_bot_api.push_message(user_id, TextSendMessage(text=message))
                print(f"‚úÖ Sent alert to {user_id}")
            except Exception as e:
                print(f"‚ùå Error sending to {user_id}: {e}")

if __name__ == "__main__":
    send_alerts()
